// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// IWorkAndName is an autogenerated mock type for the IWorkAndName type
type IWorkAndName struct {
	mock.Mock
}

type IWorkAndName_Expecter struct {
	mock *mock.Mock
}

func (_m *IWorkAndName) EXPECT() *IWorkAndName_Expecter {
	return &IWorkAndName_Expecter{mock: &_m.Mock}
}

// Name provides a mock function with no fields
func (_m *IWorkAndName) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IWorkAndName_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type IWorkAndName_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *IWorkAndName_Expecter) Name() *IWorkAndName_Name_Call {
	return &IWorkAndName_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *IWorkAndName_Name_Call) Run(run func()) *IWorkAndName_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IWorkAndName_Name_Call) Return(_a0 string) *IWorkAndName_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IWorkAndName_Name_Call) RunAndReturn(run func() string) *IWorkAndName_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Work provides a mock function with given fields: _a0
func (_m *IWorkAndName) Work(_a0 string) {
	_m.Called(_a0)
}

// IWorkAndName_Work_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Work'
type IWorkAndName_Work_Call struct {
	*mock.Call
}

// Work is a helper method to define mock.On call
//   - _a0 string
func (_e *IWorkAndName_Expecter) Work(_a0 interface{}) *IWorkAndName_Work_Call {
	return &IWorkAndName_Work_Call{Call: _e.mock.On("Work", _a0)}
}

func (_c *IWorkAndName_Work_Call) Run(run func(_a0 string)) *IWorkAndName_Work_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IWorkAndName_Work_Call) Return() *IWorkAndName_Work_Call {
	_c.Call.Return()
	return _c
}

func (_c *IWorkAndName_Work_Call) RunAndReturn(run func(string)) *IWorkAndName_Work_Call {
	_c.Run(run)
	return _c
}

// NewIWorkAndName creates a new instance of IWorkAndName. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIWorkAndName(t interface {
	mock.TestingT
	Cleanup(func())
}) *IWorkAndName {
	mock := &IWorkAndName{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
