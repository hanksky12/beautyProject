// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	gocron "github.com/go-co-op/gocron"

	mock "github.com/stretchr/testify/mock"
)

// IEnvironment is an autogenerated mock type for the IEnvironment type
type IEnvironment struct {
	mock.Mock
}

type IEnvironment_Expecter struct {
	mock *mock.Mock
}

func (_m *IEnvironment) EXPECT() *IEnvironment_Expecter {
	return &IEnvironment_Expecter{mock: &_m.Mock}
}

// InOther provides a mock function with given fields: scheduler
func (_m *IEnvironment) InOther(scheduler *gocron.Scheduler) {
	_m.Called(scheduler)
}

// IEnvironment_InOther_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InOther'
type IEnvironment_InOther_Call struct {
	*mock.Call
}

// InOther is a helper method to define mock.On call
//   - scheduler *gocron.Scheduler
func (_e *IEnvironment_Expecter) InOther(scheduler interface{}) *IEnvironment_InOther_Call {
	return &IEnvironment_InOther_Call{Call: _e.mock.On("InOther", scheduler)}
}

func (_c *IEnvironment_InOther_Call) Run(run func(scheduler *gocron.Scheduler)) *IEnvironment_InOther_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gocron.Scheduler))
	})
	return _c
}

func (_c *IEnvironment_InOther_Call) Return() *IEnvironment_InOther_Call {
	_c.Call.Return()
	return _c
}

func (_c *IEnvironment_InOther_Call) RunAndReturn(run func(*gocron.Scheduler)) *IEnvironment_InOther_Call {
	_c.Run(run)
	return _c
}

// InProduction provides a mock function with given fields: scheduler
func (_m *IEnvironment) InProduction(scheduler *gocron.Scheduler) {
	_m.Called(scheduler)
}

// IEnvironment_InProduction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InProduction'
type IEnvironment_InProduction_Call struct {
	*mock.Call
}

// InProduction is a helper method to define mock.On call
//   - scheduler *gocron.Scheduler
func (_e *IEnvironment_Expecter) InProduction(scheduler interface{}) *IEnvironment_InProduction_Call {
	return &IEnvironment_InProduction_Call{Call: _e.mock.On("InProduction", scheduler)}
}

func (_c *IEnvironment_InProduction_Call) Run(run func(scheduler *gocron.Scheduler)) *IEnvironment_InProduction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gocron.Scheduler))
	})
	return _c
}

func (_c *IEnvironment_InProduction_Call) Return() *IEnvironment_InProduction_Call {
	_c.Call.Return()
	return _c
}

func (_c *IEnvironment_InProduction_Call) RunAndReturn(run func(*gocron.Scheduler)) *IEnvironment_InProduction_Call {
	_c.Run(run)
	return _c
}

// NewIEnvironment creates a new instance of IEnvironment. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIEnvironment(t interface {
	mock.TestingT
	Cleanup(func())
}) *IEnvironment {
	mock := &IEnvironment{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
