// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	model "beautyProject/internal/pkg/model"

	mock "github.com/stretchr/testify/mock"
)

// IRepoUser is an autogenerated mock type for the IRepoUser type
type IRepoUser struct {
	mock.Mock
}

type IRepoUser_Expecter struct {
	mock *mock.Mock
}

func (_m *IRepoUser) EXPECT() *IRepoUser_Expecter {
	return &IRepoUser_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: user
func (_m *IRepoUser) Add(user *model.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IRepoUser_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type IRepoUser_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - user *model.User
func (_e *IRepoUser_Expecter) Add(user interface{}) *IRepoUser_Add_Call {
	return &IRepoUser_Add_Call{Call: _e.mock.On("Add", user)}
}

func (_c *IRepoUser_Add_Call) Run(run func(user *model.User)) *IRepoUser_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.User))
	})
	return _c
}

func (_c *IRepoUser_Add_Call) Return(_a0 error) *IRepoUser_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IRepoUser_Add_Call) RunAndReturn(run func(*model.User) error) *IRepoUser_Add_Call {
	_c.Call.Return(run)
	return _c
}

// FindByName provides a mock function with given fields: name
func (_m *IRepoUser) FindByName(name string) (*model.User, bool) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for FindByName")
	}

	var r0 *model.User
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (*model.User, bool)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *model.User); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// IRepoUser_FindByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByName'
type IRepoUser_FindByName_Call struct {
	*mock.Call
}

// FindByName is a helper method to define mock.On call
//   - name string
func (_e *IRepoUser_Expecter) FindByName(name interface{}) *IRepoUser_FindByName_Call {
	return &IRepoUser_FindByName_Call{Call: _e.mock.On("FindByName", name)}
}

func (_c *IRepoUser_FindByName_Call) Run(run func(name string)) *IRepoUser_FindByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IRepoUser_FindByName_Call) Return(_a0 *model.User, _a1 bool) *IRepoUser_FindByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IRepoUser_FindByName_Call) RunAndReturn(run func(string) (*model.User, bool)) *IRepoUser_FindByName_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: id
func (_m *IRepoUser) Remove(id int) {
	_m.Called(id)
}

// IRepoUser_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type IRepoUser_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - id int
func (_e *IRepoUser_Expecter) Remove(id interface{}) *IRepoUser_Remove_Call {
	return &IRepoUser_Remove_Call{Call: _e.mock.On("Remove", id)}
}

func (_c *IRepoUser_Remove_Call) Run(run func(id int)) *IRepoUser_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *IRepoUser_Remove_Call) Return() *IRepoUser_Remove_Call {
	_c.Call.Return()
	return _c
}

func (_c *IRepoUser_Remove_Call) RunAndReturn(run func(int)) *IRepoUser_Remove_Call {
	_c.Run(run)
	return _c
}

// NewIRepoUser creates a new instance of IRepoUser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIRepoUser(t interface {
	mock.TestingT
	Cleanup(func())
}) *IRepoUser {
	mock := &IRepoUser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
